{% extends base_template %}
{% import "@SonataCore/Form/datepicker.html.twig" as datePicker %}

{% block title %}
    {{ 'Upload and edit videos' }}
{% endblock %}

{% block javascripts %}
    {{ parent() }}
    <script src="https://widget.cloudinary.com/v2.0/global/all.js" type="text/javascript"></script>
{% endblock %}

{% block stylesheets %}
    {{ parent() }}
{% endblock %}

{% block form %}
    <div class="sonata-ba-form">
        <div class="row">
            <div class="col-md-12">
                <div class="box box-primary">
                    <div class="box-header">
                        <h4 class="box-title">
                            {{ block('title') }}
                        </h4>
                    </div>
                    <div class="box-body">
                        <div class="sonata-ba-collapsed-fields">
                            <button id="upload_widget_opener" hidden>Open widget</button>

                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
    <script id="post-upload-form" type="text/x-handlebars">
        <div class="row">
            <div class="col-md-3">
                <div class="row">
                    <div class="col-md-12 text-center" style="margin-bottom: 2px">
                        <img src="{{ startThumbnail }}" alt="" width="150" height="80">
                    </div>
                    <div class="col-md-12 text-center image-container">
                        <img src="{{ endThumbnail }}" alt="" width="150" height="80">
                    </div>
                </div>
            </div>
            <div class="col-md-9">
                <form action="#" id="{{ uploadedVideo.uuid }}">
                    <div class="row">
                        <div class="col-md-9">
                            <div class="form-group">
                                <label for="title">Title</label>
                                <input type="text" class="form-control" id="title" value="{{ uploadedVideo.title }}">
                            </div>
                        </div>
                        <div class="col-md-3">
                            <div class="form-group">
                                <label for="expired-date">Expired date</label>
                                <input size="16" type="text" id="expired-date" class="js-datepicker form-control">
                            </div>
                        </div>
                    </div>
                    <div class="form-group">
                        <label for="description">Description</label>
                        <textarea class="form-control" rows="2" id="description" form="form"></textarea>
                    </div>
                </form>
            </div>
        </div>
    </script>
    <script>
        $(document).ready(function() {
            $('.js-datepicker').datetimepicker({format: 'Y-MM-DD HH:mm'});

            var signatureUrl = "{{ admin.generateUrl('signature') }}";
            var saveBaseVideoDataUrl = "{{ admin.generateUrl('saveBaseVideoData') }}";
            var savePostUploadVideoDataUrl = "{{ admin.generateUrl('savePostUploadVideoData') }}";

            var uploadHelper = new UploadHelper(signatureUrl, saveBaseVideoDataUrl, savePostUploadVideoDataUrl);
            var videoDataCollector = new VideoDataCollector();

            var preUploadFormData = JSON.parse('{{ preUploadFormData|raw }}');

            var widgetOptions = JSON.parse('{{ widgetOptions|raw }}');
            widgetOptions['uploadSignature'] = uploadHelper.getSignatureCallback();

            var widjet = cloudinary.createUploadWidget(widgetOptions, function (error, result) {
                switch (result.event) {
                    case 'success':
                        uploadHelper
                            .saveBaseVideoData(preUploadFormData, result.info)
                            .then(
                                function(uploadedVideo) {
                                    videoDataCollector.addSuccessfullySaved(uploadedVideo)
                                },
                                function() {
                                    // TODO not saved data handler
                                }
                            );
                        break;
                    case 'close':
                        break;
                }

                console.log('result');
                console.log(result);
                console.log('error');
                console.log(error);
            });

            widjet.open();
        });

        function UploadHelper(signatureUrl, saveBaseVideoDataUrl, savePostUploadVideoDataUrl) {
            /**
             * Endpoint urls
             */
            this.signatureUrl = signatureUrl;
            this.saveBaseVideoDataUrl = saveBaseVideoDataUrl;
            this.savePostUploadVideoDataUrl = savePostUploadVideoDataUrl;

            /**
             * Save general video data from widget callback and pre-upload form data
             *
             * @param {object} preUploadFormData
             * @param {object} widgetCallbackData
             */
            this.saveBaseVideoData = function (preUploadFormData, widgetCallbackData) {
                var url = this.saveBaseVideoDataUrl;
                var uploadedVideoData = Object.assign({}, preUploadFormData);

                uploadedVideoData['title'] = widgetCallbackData.original_filename;
                uploadedVideoData['remoteId'] = widgetCallbackData.public_id;
                uploadedVideoData['remoteUrl'] = widgetCallbackData.url;

                return new Promise(function (resolve, reject) {
                    $.ajax({
                        url: url,
                        type: 'POST',
                        data: JSON.stringify(uploadedVideoData),
                        dataType: 'json',
                        success: function (data, textStatus, jqXHR) {
                            resolve(data);
                        },
                        error: function (jqXHR, textStatus, errorThrown) {
                            // TODO not saved data handler
                        }
                    })
                });
            };

            /**
             * Get callback for generate signature
             *
             * @returns {Function}
             */
            this.getSignatureCallback = function () {
                var self = this;

                return function (callback, paramsToSign) {
                    $.ajax({
                        url : self.signatureUrl,
                        type : 'GET',
                        dataType: 'text',
                        data : { data: paramsToSign },
                        success : function(signature) {
                            callback(signature);
                        }
                    });
                }
            }
        }

        function VideoDataCollector() {
            /**
             * Upload video data
             *
             * @type { [{ uuid: {string}, title: {string}, thumbnails: {array} }] }
             */
            this.successfullySaved = [];

            /**
             * Uploaded, but not saved videos
             *
             * @type {Array}
             */
            this.notSaved = [];

            this.render = function() {

            };

            this.addSuccessfullySaved = function (uploadedVideoData) {
                this.successfullySaved.push(uploadedVideoData);
            };

            this.addNotSaved = function (uploadedVideoData) {
                this.notSaved.push(uploadedVideoData);
            };
        }
    </script>
{% endblock %}