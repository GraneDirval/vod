{% macro render() %}
    {% import "@App/Components/Blocks/Header/header_main.html.twig" as  header_main %}

    <link rel="stylesheet" href="{{ asset('css/player.css') }}">

    <div id="player-modal" class="flex-column player-modal-wrapper d-none player-modal" tabindex="-1">

        {{ header_main.render() }}

        <div class="d-flex flex-column player-modal-content">
            <div class="d-flex flex-shrink-0 close-modal-button-container x-close-modal-button align-items-center justify-content-end mb-2">
                <div class="close-modal-button-text">
                    {{ translate('player.close') }}
                </div>
                <div class="close-modal-button"></div>
            </div>

            <div class="">
                <video id="video-player-frame" controls class="cld-video-player cld-fluid"></video>
            </div>

            <div class="modal-related-video-main-block d-flex flex-column">
                <div class="d-flex flex-row align-items-center justify-content-center modal-related-video-section-title-block">
                    <div class="separator_left"></div>
                    <div class="modal-related-video-section-title-text">
                        {{ translate('player.related_videos') }}
                    </div>
                    <div class="separator_right"></div>
                </div>
                <div class="modal-related-videos-block"></div>
            </div>
        </div>
    </div>

    {% if hasActiveSubscription() or isNotFullyPaid() %}
        <script>
            var trackEventRoute = '{{ url('track_video_play') }}';
            let isLoading = false;

            $(window).on('load', function () {

                function makeCurrentlyPlaying(index) {
                    $('.modal-related-videos-block .related-video').each(function () {
                        let elementIndex = $(this).attr('data-public-id');

                        if (index != elementIndex) {
                            $(this).removeClass('currently-playing')
                        } else {
                            $(this).addClass('currently-playing')
                        }
                    });
                }

                function openModal() {
                    $('#player-modal').addClass('d-flex');
                    $('html').css({'overflow-y': 'hidden'});
                }

                function closeModal() {
                    $('#player-modal').removeClass('d-flex');
                    $('html').css({'overflow-y': 'auto'});
                    demoplayer.stop();
                    $('.modal-related-videos-block').empty();
                }

                function changeVideo(publicId, options) {
                    demoplayer.source(publicId, options);
                }

                const cld        = cloudinary.Cloudinary.new({cloud_name: '{{ getCloudName() }}'});
                const demoplayer = cld.videoPlayer('video-player-frame')
                    .sourceTypes(['hls'])
                    .transformation({streaming_profile: 'hd'});

                demoplayer.on('play', function (event) {
                    isLoading = true;
                    $.post(trackEventRoute, {
                        video  : demoplayer.currentPublicId()
                    }).then(()=>{
                        isLoading = false;
                    });
                });

                //TODO: Refactor this
                let loadMoreFunc;
                let offset = 0;
                let isFirstQuery = true;
                $(document).on('click', '.x-play-button', function () {
                    openModal();

                    let isLast = false;
                    let batchRelatedVideosRoute = '{{ url('load_more_video') }}';
                    let options = ($(this).attr('data-options')) ? JSON.parse($(this).attr('data-options')) : undefined;
                    let publicId = $(this).attr('data-public-id');
                    let uri = `${batchRelatedVideosRoute}?videoPublicId=${publicId}&offset=${offset}`;

                    // TODO: Refactor this. IMPORTANT!!!!
                    // Main problem is that we have one listener on play-button on the main page and on the page with recording video with related-videos.
                    // We need to separate this
                    if(isFirstQuery) {
                        $.get(uri, (data) => {
                            $('.modal-related-videos-block').append(data.html);
                            isLast = Boolean(data.isLast);
                            isFirstQuery = false;
                            if (modalRelatedVideosBlock.childNodes.length > 0) {
                                modalRelatedVideosBlock.addEventListener('scroll', loadMoreFunc);
                            }
                        });
                    }

                    let isAllowRequest = true;
                    let modalRelatedVideosBlock = document.querySelector('.modal-related-videos-block');
                    loadMoreFunc = () => {
                        let mrvbScrollTop = modalRelatedVideosBlock.scrollTop;
                        let mrvbHeight = modalRelatedVideosBlock.scrollHeight;
                        console.log(Math.round(mrvbScrollTop),  Math.round(mrvbHeight - modalRelatedVideosBlock.offsetHeight))
                        if (Math.round(mrvbScrollTop) >= Math.round(mrvbHeight - modalRelatedVideosBlock.offsetHeight)
                            && isAllowRequest
                            && !isLast
                            && !isLoading
                        ) {
                            offset += 20;
                            uri = `${batchRelatedVideosRoute}?videoPublicId=${publicId}&offset=${offset}`;
                            isAllowRequest = false;
                            $.get(uri, (data) => {
                                $('.modal-related-videos-block').append(data.html);
                                isAllowRequest = true;
                                isLast = Boolean(data.isLast);
                            });
                        }
                    };

                    changeVideo(publicId, options);
                    demoplayer.play();
                });

                $(document).on('click', '.modal-related-videos-block .related-video', function () {
                    let index    = $(this).attr('data-public-id');
                    let publicId = $(this).attr('data-public-id');
                    let options = ($(this).attr('data-options')) ? JSON.parse($(this).attr('data-options')) : undefined;

                    changeVideo(publicId, options);
                    makeCurrentlyPlaying(index);
                    demoplayer.play();
                });

                $(document).on('click', '.x-close-modal-button', function () {
                    let modalRelatedVideosBlock = document.querySelector('.modal-related-videos-block');
                    modalRelatedVideosBlock.removeEventListener('scroll', loadMoreFunc);
                    isFirstQuery = true;
                    closeModal()
                });

            })
        </script>
    {% else %}
        <script>
            $(document).on('click', '.x-play-button', function () {
                window.location = '{{ path('landing') }}'
            })
        </script>
    {% endif %}

{% endmacro %}