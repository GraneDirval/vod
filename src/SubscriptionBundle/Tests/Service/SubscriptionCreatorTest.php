<?php
/**
 * Created by PhpStorm.
 * User: dmitriy
 * Date: 22.05.18
 * Time: 13:48
 */

namespace SubscriptionBundle\Tests\Service;

use ExtrasBundle\Utils\UuidGenerator;
use Mockery;
use PHPUnit\Framework\TestCase;
use SubscriptionBundle\Entity\Subscription;
use SubscriptionBundle\Entity\SubscriptionPack;
use SubscriptionBundle\Service\EntitySaveHelper;
use SubscriptionBundle\Subscription\Common\SubscriptionFactory;
use IdentificationBundle\Entity\User;

class SubscriptionCreatorTest extends TestCase
{
    use Mockery\Adapter\Phpunit\MockeryPHPUnitIntegration;

    /**
     * @var EntitySaveHelper|Mockery\MockInterface
     */
    private $entitySaveHelper;

    protected function setUp()
    {
        $this->entitySaveHelper = Mockery::spy(EntitySaveHelper::class);

        parent::setUp(); // TODO: Change the autogenerated stub
    }


    public function testCreateAndSave()
    {
        /** @var Mockery\Mock|SubscriptionFactory $creator */
        $creator = Mockery::mock(SubscriptionFactory::class, [$this->entitySaveHelper])->makePartial();

        $subscription = $creator->createAndSave(new User(UuidGenerator::generate()), new SubscriptionPack(UuidGenerator::generate()));

        $this->assertInstanceOf(Subscription::class, $subscription);
        $creator->shouldHaveReceived('create')->once();
        $this->entitySaveHelper->shouldHaveReceived('persistAndSave')->once();

    }

    public function testCreate()
    {

        $creator      = new SubscriptionFactory($this->entitySaveHelper);
        $pack         = new SubscriptionPack(UuidGenerator::generate());
        $user         = new User(UuidGenerator::generate());
        $subscription = $creator->create($user, $pack, 'affiliate');

        $this->assertEquals('affiliate', $subscription->getAffiliateToken());
        $this->assertEquals($user, $subscription->getUser());
        $this->assertEquals($pack, $subscription->getSubscriptionPack());
        $this->assertInstanceOf(Subscription::class, $subscription);


    }
}
