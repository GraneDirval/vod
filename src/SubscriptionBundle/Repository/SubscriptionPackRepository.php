<?php

namespace SubscriptionBundle\Repository;

use Doctrine\ORM\AbstractQuery;
use Doctrine\ORM\EntityRepository;
use SubscriptionBundle\Entity\SubscriptionPack;

/**
 * SubscriptionPackRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class SubscriptionPackRepository extends EntityRepository
{

    /**
     * @param SubscriptionPack $subscriptionPack
     *
     * @return array
     */
    public function getOtherActiveSubscriptionPacks(SubscriptionPack $subscriptionPack)
    {
        $qb = $this->createQueryBuilder('sp');

        $query = $qb
            ->where('sp.status = :status ')
            ->andWhere('sp.carrierId = :carrierId')
            ->andWhere('sp.uuid != :uuid')
            ->setParameters([
                'status' => SubscriptionPack::ACTIVE_SUBSCRIPTION_PACK,
                'carrierId' => $subscriptionPack->getCarrierId(),
                'uuid' => $subscriptionPack->getUuid()
            ])
            ->getQuery();

        return $query->getResult();
    }

    /**
     * @param SubscriptionPack $subscriptionPack
     * @return mixed
     * @throws \Doctrine\ORM\NonUniqueResultException
     */
    public function getCarrier(SubscriptionPack $subscriptionPack)
    {
        $qb = $this->getEntityManager()->createQueryBuilder()
            ->select('c')
            ->from('AppBundle:Carrier', 'c')
            ->where('c.id_carrier = :idCarrier')
            ->setParameter('idCarrier', $subscriptionPack->getCarrierId())
        ;
        $oCarrier = $qb->getQuery()->getOneOrNullResult(AbstractQuery::HYDRATE_SINGLE_SCALAR);
        return $oCarrier;
    }
}
