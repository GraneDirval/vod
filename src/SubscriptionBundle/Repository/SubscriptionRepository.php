<?php

namespace SubscriptionBundle\Repository;

use AppBundle\Entity\Carrier;
use Carbon\Carbon;
use Doctrine\ORM\EntityRepository;
use Doctrine\ORM\Internal\Hydration\IterableResult;
use SubscriptionBundle\Entity\Subscription;
use SubscriptionBundle\Exception\SubscriptionException;
use UserBundle\Entity\BillableUser;

/**
 * SubscriptionRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class SubscriptionRepository extends EntityRepository
{
    /**
     * @param BillableUser $owner
     * @return Subscription|null
     * @throws \Doctrine\ORM\NonUniqueResultException
     */
    public function findCurrentSubscriptionByOwner(BillableUser $owner)
    {

        // Retrieving the latest subscription created by this user
        $qb = $this->createQueryBuilder('s');
        $qb->where('s.owner = :owner')
            ->addOrderBy('s.created', 'DESC')
            ->setMaxResults(1)
            ->setParameter('owner', $owner);


        $existingActiveSubscription = $qb->getQuery()->getOneOrNullResult();
        return $existingActiveSubscription;
    }

    public function findPreviousUnSubscribedSubscription(BillableUser $owner, Subscription $subscription)
    {

        // Retrieving the latest subscription created by this user
        $qb = $this->createQueryBuilder('s');
        $qb->where('s.owner = :owner')
            ->andWhere('s.status = :status')
            ->andWhere('s.id != :id')
            ->addOrderBy('s.created', 'DESC')
            ->setMaxResults(1)
            ->setParameter('owner', $owner)
            ->setParameter('id', $subscription->getUuid())
            ->setParameter('status', Subscription::IS_INACTIVE);


        $existingActiveSubscription = $qb->getQuery()->getOneOrNullResult();
        return $existingActiveSubscription;
    }

    /**
     * @param Carbon $startDate
     * @param Carbon $endDate
     * @return IterableResult
     * @throws SubscriptionException
     */
    public function findRenewableSubscription($startDate, $endDate)
    {
        $qb = $this->createQueryBuilder('s');

        $now = Carbon::now();
        if (!$endDate || $endDate->greaterThan($now)) {
            throw new SubscriptionException('End date must be provided and it needs to be less than current time.');
        }

        if ($startDate && $endDate) {
            if ($startDate->greaterThan($now) || $endDate->greaterThan($now)) {
                throw new SubscriptionException('Start date needs to be less than current datetime');
            }

            if ($startDate->greaterThan($endDate)) {
                throw new SubscriptionException('Start date needs to be less than end date');
            }

            $qb->where('s.renewDate BETWEEN :startDate AND :endDate')
                ->setParameter('startDate', $startDate->format('Y-m-d H:i:s'));

        } else {

            $qb->where('s.renewDate <= :endDate');
        }

        $qb->join('s.plan', 'p', 'WITH', 's.plan = p.id');
        $qb->andWhere('s.status = :activeStatus')
            ->andWhere('p.providerManagedSubscriptions = :providerManagedSubscriptions')
            ->addOrderBy('s.renewDate', 'DESC')
            ->setParameter('providerManagedSubscriptions', 0)
            ->setParameter('activeStatus', Subscription::IS_ACTIVE)
            ->setParameter('endDate', $endDate->format('Y-m-d H:i:s'));


        $existingActiveSubscriptionIterator = $qb->getQuery()->iterate();
        return $existingActiveSubscriptionIterator;
    }

    public function findPendingSubscription()
    {
        $qb = $this->createQueryBuilder('s');

        /*     $now = new \DateTime();
             $alertTime = clone $now;
             $alertTime->modify( '-2 hour' )->format('Y-m-d H:i:s');*/
//        $alertTime = Carbon::now(-2);

        $qb->select('count(s.id)');
//            ->where('s.renewDate >= :alertTime')
//            ->setParameter('alertTime', $alertTime);

        //     $qb->join('s.plan', 'p', 'WITH', 's.plan = p.id');
        $qb->andWhere('s.status = :pendingStatus')
            //     ->andWhere('p.providerManagedSubscriptions = :providerManagedSubscriptions')
            ->addOrderBy('s.renewDate', 'DESC')
            //  ->setParameter('providerManagedSubscriptions', 0)
            ->setParameter('pendingStatus', Subscription::IS_PENDING);

        $pendingSubCount = (integer)$qb->getQuery()->getSingleScalarResult();
        var_dump($pendingSubCount);
        return $pendingSubCount;
    }

    /**
     * @param Carrier $carrier
     * @return Subscription[]
     */
    public function getExpiredSubscriptions(Carrier $carrier)
    {
        $startedLimit = new \DateTime('-' . $carrier->getTrialPeriod() . ' days');

        $qb    = $this->getEntityManager()->createQueryBuilder();
        $query = $qb->select('s')
            ->from($this->getEntityName(), 's')
            ->join('s.owner', 'owner')
            ->join('owner.carrier', 'carrier')
            ->andWhere('s.currentStage = :subAction')
            ->andWhere('s.status = :subStatus')
            ->andWhere('s.renewDate < :currentTime')
            ->andWhere('(carrier = :carrier AND s.created >= :startedLimit)')
            ->setParameters([
                'subStatus'     => Subscription::IS_ACTIVE,
                'subAction'     => Subscription::ACTION_SUBSCRIBE,
                'currentTime'   => new \DateTime(),
                'startedLimit'  => $startedLimit,
                'carrier'       => $carrier
            ])
            ->setMaxResults(100)
            ->getQuery();

        return $query->getResult();
    }

    /**
     * get last AI index
     * @return mixed
     * @throws \Doctrine\ORM\NoResultException
     * @throws \Doctrine\ORM\NonUniqueResultException
     */
    public function getLastId()
    {
        $qb    = $this->getEntityManager()->createQueryBuilder();
        $query = $qb->select('s.id')
            ->from($this->getEntityName(), 's')
            ->orderBy('s.id', 'DESC')
            ->setMaxResults(1)
            ->getQuery();

        return $query->getSingleScalarResult();
    }
}


