<?php
/**
 * Created by PhpStorm.
 * User: dmitriy
 * Date: 11.01.19
 * Time: 10:46
 */

use IdentificationBundle\Entity\CarrierInterface;
use IdentificationBundle\Service\Action\Identification\Common\HeaderEnrichmentHandler;
use IdentificationBundle\Service\Action\Identification\Handler\HasHeaderEnrichment;
use Symfony\Component\HttpFoundation\Request;

class HeaderEnrichmentHandlerTest extends \PHPUnit\Framework\TestCase
{


    /**
     * @var \Mockery\MockInterface|HeaderEnrichmentHandler
     */
    private $headerEnrichmentHandler;
    /**
     * @var \Mockery\MockInterface|\Doctrine\ORM\EntityManagerInterface
     */
    private $entityManager;
    /**
     * @var \Mockery\MockInterface|\IdentificationBundle\Service\Action\Identification\Common\UserFactory
     */
    private $userFactory;
    /**
     * @var \Mockery\MockInterface|\IdentificationBundle\Repository\UserRepository
     */
    private $userRepository;

    protected function setUp()/* The :void return type declaration that should be here would cause a BC issue */
    {

        $this->entityManager  = Mockery::spy(\Doctrine\ORM\EntityManagerInterface::class);
        $this->userRepository = Mockery::spy(\IdentificationBundle\Repository\UserRepository::class);
        $this->userFactory    = new \IdentificationBundle\Service\Action\Identification\Common\UserFactory();

        $this->headerEnrichmentHandler = new HeaderEnrichmentHandler(
            $this->userFactory,
            $this->entityManager,
            $this->userRepository
        );

        parent::setUp(); // TODO: Change the autogenerated stub
    }


    public function testNoErrorWhenMsisdnPresent()
    {

        $request = new Request([], [], [], [], [], ['REMOTE_ADDR' => '127.0.0.1']);

        $handler = Mockery::spy(HasHeaderEnrichment::class);
        $handler->allows(['getMsisdn' => 'msisdn']);

        $carrier = Mockery::spy(CarrierInterface::class);

        $this->headerEnrichmentHandler->process($request, $handler, $carrier, 'token');

        $this->assertTrue(true);
    }

    public function testErrorWhenNoMsisdn()
    {
        $this->expectException(\IdentificationBundle\Service\Action\Identification\Common\Exception\FailedIdentificationException::class);

        $request = new Request([], [], [], [], [], ['REMOTE_ADDR' => '127.0.0.1']);

        $handler = Mockery::spy(HasHeaderEnrichment::class);
        $carrier = Mockery::spy(CarrierInterface::class);

        $this->headerEnrichmentHandler->process($request, $handler, $carrier, 'token');

    }
}
