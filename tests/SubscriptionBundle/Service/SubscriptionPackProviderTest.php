<?php
/**
 * Created by PhpStorm.
 * User: dmitriy
 * Date: 19.06.18
 * Time: 17:27
 */

namespace Service;

use App\Domain\Entity\Carrier;
use ExtrasBundle\Utils\UuidGenerator;
use Mockery\Adapter\Phpunit\MockeryPHPUnitIntegration;
use PHPUnit\Framework\TestCase;
use SubscriptionBundle\Entity\SubscriptionPack;
use SubscriptionBundle\SubscriptionPack\Exception\ActiveSubscriptionPackNotFound;
use SubscriptionBundle\Repository\SubscriptionPackRepository;
use SubscriptionBundle\SubscriptionPack\SubscriptionPackProvider;
use IdentificationBundle\Entity\User;

class SubscriptionPackProviderTest extends TestCase
{

    use MockeryPHPUnitIntegration;

    protected function setUp()
    {
        parent::setUp(); // TODO: Change the autogenerated stub
    }

    public function testIsSubscriptionPackReturned()
    {
        $subscriptionPackRepositoryMock = \Mockery::spy(SubscriptionPackRepository::class);
        $provider                       = new SubscriptionPackProvider($subscriptionPackRepositoryMock);

        $subscriptionPackRepositoryMock
            ->shouldReceive('findOneBy')
            ->andReturn(new SubscriptionPack(UuidGenerator::generate()));

        $user = new User(UuidGenerator::generate());
        $user->setCarrier(new Carrier(UuidGenerator::generate()));

        $subscriptionPack = $provider->getActiveSubscriptionPack($user);

        $this->assertInstanceOf(SubscriptionPack::class, $subscriptionPack, 'subscription not correctly provided');
    }

    public function testIsExceptionThrownWhenNoPackAvailable()
    {

        $subscriptionPackRepositoryMock = \Mockery::spy(SubscriptionPackRepository::class);
        $provider                       = new SubscriptionPackProvider($subscriptionPackRepositoryMock);

        $subscriptionPackRepositoryMock
            ->shouldReceive('findOneBy')
            ->andReturn(null);

        $user = new User(UuidGenerator::generate());
        $user->setCarrier(new Carrier(UuidGenerator::generate()));

        $this->expectException(ActiveSubscriptionPackNotFound::class);
        $provider->getActiveSubscriptionPack($user);
    }
}
